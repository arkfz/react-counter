{"version":3,"sources":["Buttons.js","Step.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","resetOrReinitCounter","reset","_this","props","resetCounterValue","_this2","this","react_default","a","createElement","className","onClick","changeCounterValue","stepValue","Component","Step","updateAdd","step","updateStep","ref","data","onChange","type","min","Counter","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeValue","setState","prevValue","counterValue","parseInt","state","resetCounter","initValue","isNaN","value","src_Buttons_0","src_Step_0","App","src_Counter_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAoBeA,gOAfXC,qBAAuB,SAACC,GACpBC,EAAKC,MAAMC,kBAAkBH,4EAGxB,IAAAI,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAKH,MAAMS,oBAA5B,OAAqDN,KAAKH,MAAMU,WAChEN,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,EAAKL,sBAAqB,KAAjD,UACAO,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,EAAKL,sBAAqB,KAAjD,iBAXMc,cCmBPC,oNAjBXf,qBAAuB,SAACC,GACpBC,EAAKC,MAAMC,kBAAkBH,MAGjCe,UAAY,SAACC,GACTf,EAAKC,MAAMe,WAAWhB,EAAKW,oFAGtB,IAAAR,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,SACUH,EAAAC,EAAAC,cAAA,SAAOU,IAAK,SAACC,GAAUf,EAAKQ,UAAYO,GAAOC,SAAUf,KAAKU,UAAWM,KAAK,SAASC,IAAI,cAb9FT,cCkEJU,cA9DX,SAAAA,EAAYrB,GAAO,IAAAD,EAAAuB,OAAAC,EAAA,EAAAD,CAAAnB,KAAAkB,IACftB,EAAAuB,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAvB,KAAMH,KAcV2B,YAAc,WACV5B,EAAK6B,SAAS,SAACC,GACX,MACI,CACIC,aAAcD,EAAUC,aAAeC,SAAShC,EAAKiC,MAAMtB,eAnBxDX,EAyBnBkC,aAAe,SAACA,GACZ,IAAIC,EAAY,EAEXD,GACIE,MAAMpC,EAAKC,MAAMkC,aAClBA,EAAYH,SAAShC,EAAKC,MAAMkC,YAIxCnC,EAAK6B,SAAS,CACVE,aAAcI,KAnCHnC,EAuCnBgB,WAAa,SAACD,GACVf,EAAK6B,SAAS,CACVlB,UAAWI,EAAKsB,SAtCpB,IAAIF,EAAY,EAHD,OAKVC,MAAMpC,EAAKC,MAAMkC,aAClBA,EAAYH,SAAShC,EAAKC,MAAMkC,YAGpCnC,EAAKiC,MAAQ,CACTF,aAAcI,EACdxB,UAAW,GAXAX,wEA8Cf,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,WACYH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASJ,KAAK6B,MAAMF,cAC5C1B,EAAAC,EAAAC,cAAC+B,EAAD,CACI5B,mBAAoBN,KAAKwB,YACzBjB,UAAWP,KAAK6B,MAAMtB,UACtBT,kBAAmBE,KAAK8B,eAE5B7B,EAAAC,EAAAC,cAACgC,EAAD,CACIvB,WAAYZ,KAAKY,qBAzDfJ,aCaP4B,mLAZX,OACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,6BAEFF,EAAAC,EAAAC,cAACkC,EAAD,CAASN,UAAU,eARTvB,aCQE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8421dd94.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Buttons.css';\r\n\r\nclass Buttons extends Component {\r\n\r\n    resetOrReinitCounter = (reset) => {\r\n        this.props.resetCounterValue(reset);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"buttons-panel\">\r\n                <button onClick={this.props.changeCounterValue}>Add {this.props.stepValue}</button>\r\n                <button onClick={() => this.resetOrReinitCounter(false)}>ReInit</button>\r\n                <button onClick={() => this.resetOrReinitCounter(true)}>Reset</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Buttons;","import React, {Component} from 'react';\r\nimport './Step.css';\r\n\r\nclass Step extends Component {\r\n\r\n    resetOrReinitCounter = (reset) => {\r\n        this.props.resetCounterValue(reset);\r\n    }\r\n\r\n    updateAdd = (step) => {\r\n        this.props.updateStep(this.stepValue)\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div className='Step'>\r\n                Krok: <input ref={(data) => {this.stepValue = data}} onChange={this.updateAdd} type=\"number\" min=\"1\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Step;","import React, { Component } from 'react';\r\nimport './Counter.css';\r\nimport Buttons from './Buttons';\r\nimport Step from './Step';\r\n\r\nclass Counter extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let initValue = 0;\r\n\r\n        if (!isNaN(this.props.initValue)) {\r\n            initValue = parseInt(this.props.initValue);\r\n        }\r\n\r\n        this.state = {\r\n            counterValue: initValue,\r\n            stepValue: 1,\r\n        }\r\n    }\r\n\r\n    changeValue = () => {\r\n        this.setState((prevValue) => {\r\n            return (\r\n                {\r\n                    counterValue: prevValue.counterValue + parseInt(this.state.stepValue),\r\n                }\r\n            )\r\n        })\r\n    }\r\n\r\n    resetCounter = (resetCounter) => {\r\n        let initValue = 0;\r\n\r\n        if (!resetCounter) {\r\n            if (!isNaN(this.props.initValue)) {\r\n                initValue = parseInt(this.props.initValue);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            counterValue: initValue,\r\n        })\r\n    }\r\n\r\n    updateStep = (step) => {\r\n        this.setState({\r\n            stepValue: step.value,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='counter'>\r\n                Licznik:<span className='value'>{this.state.counterValue}</span>\r\n                <Buttons\r\n                    changeCounterValue={this.changeValue}\r\n                    stepValue={this.state.stepValue}\r\n                    resetCounterValue={this.resetCounter}\r\n                />\r\n                <Step\r\n                    updateStep={this.updateStep}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter;","import React, { Component } from 'react';\nimport './App.css';\nimport Counter from './Counter';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <h1>Aplikacja Licznika w ReactJS</h1>\n          <h2>Zadanie Domowe</h2>\n        </header>\n        <Counter initValue='23' />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}